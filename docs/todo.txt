-  upload annotations starting with 22-part2
   -  finish uploading videos
   -  install sony vegas
   -  sort obbg_funcs.h
   -  shadows

   -  add mesh cache with explicit storing of coordinates & call function to access it instead of accessing inline
   -  why is set_mesh_chunk_for_coord either
      - (a) not just getting x & y from the mesh_chunk
      - (b) or writing mc->cx & mc->y with the passed-in-coordinates
      - (c) or at least asserting that they match
   -  num_gen_chunk_alloc is statistics output but is accessed thread-unsafely
   -  balancer should only swap if one or the other lane is moving

Factorio-esque features:
   +  basic pickers (factorio "inserters")
   +  conveyor belts - factorio & factoryidle & infinifactory
   -  drills - factorio & modded minecraft
      +  real driller machines (attached to specific block types that have ore)
   -  furnaces - factorio & minecraft
   -  assemblers - factorio & factoryidle
   -  liquid - factorio & minecraft
   -  power - factorio & infinifactory-ish
   -  control circuits - factorio & infinifactory
   -  enemies & tower defense-ish gameplay - factorio?

Initial crafting tree:

   -  Furnace:
         fuel: coal
         input: iron ore
         output: iron bar

   -  Iron Gear Maker
         input: iron bar
         output: iron gears

   -  Iron Belt Maker
         input: 2x iron gear, iron bar
         output: conveyor belt

   -  Iron Belt Ramp Maker
         input: 3x iron gear, iron bar
         output: conveyor belt ramp

   -  Steel Plate Maker
         fuel: coal
         input: iron bar
         output: steel plate

Ideas:
   -  iron initially, but need steel for higher-speed things? (i.e. more exact gears)
   -  coal - minecraft & factorio
   -  copper + iron => bronze (and brass)
   -  can animate pickers like current pickers but w/ lowering grabbers w/ skinned animation system
      - animation implementation:
        - bones are compact, 4 floats per object:
           bone #1: position of grab module along pole --> 1 float (x coord)
           bone #2: position of lower/raise grab module --> 1 float (z coord)
           bone #3: grab teeth x axis --> 1 float
           bone #4: grab teeth y axis --> 1 float
        - each vertex gets 4 *signed* bone weights
           - four diagonal teeth use bone #3 & #4 in all combinations of signs
      - above implementation can almost be used for 'flexible pickers'
        * flexible picker uses two-joint fake IK 
          - we don't bother will angling a joint
          - just draw two rods, one from base to midpoint, one from midpoint to endpoint
          - bone #1, #2, #3: position of grabber x/y/z
            - midpoint uses 50% weight x/z bones; maybe 50% for y also makes sense, but:
          - bone #4
            - vertical offset of midpoint; as grabber extends out, this decreases to keep rods roughly same length
          - note this picker doesn't have grabber teeth
        - first requires bones: x,x,y,z; seconds requires: x,y,z,z
          - can use *5* bone weights; 3 bones are x,y,z, 4th & 5th weight apply 4th bone value to x & z. but 5 bone weights sub-ideal!
          - 8 bone weights, 4 translate values
          -  #1: x,y,z
          -  #2: x,y,z
          -  #3: x
          -  #4: z
      - use instanced rendering with 2 vertex attributes:
        - vec4 with 3 position values & 1 rotation (rotation is in 90-degree steps; convert to int and look up table, don't use sin/cos)
        - vec4 with four 1D bone values described above
   -  never recompute belt mobility in-between ticks (will cause belt objects to teleport between non-anim and anim states)
      - need to recompute belt mobility after all pickers run (never hit this case in testing because I didn't allow things to get full-ish?)
        - maybe just run pickers *before* belts? may need to adjust where they pick from
   -  do fast belts soon, run everything but slow belts on fast tick
   -  maybe don't allow destroying the procgen blocks (i.e 'natural blocks')
        initially, and make the world gen very 3d, so you have to work a lot to
        deal with the verticality and do sub-ideal placement initially

   Factorio-esque TODO:
   -  store 'reservations' on conveyor belts
   -  more splitter/balancer variants
   -  fast vs slow belts
   -  manufacturing tree
      -  data-drive manufacturing tree
      -  expand tree
      +  better placeholder art
         - draw actual blocks/machines on belt, or just sprites???
   -  machines are 2x2x2 blocks
   -  animated machines
      -  pass in sin & cos as "bone data"
         - NO store (sin+1) + (cos > 0 ? 4 : 0), shader computes sin, sqrt(1-sin^2)
         - around x axis or around z axis
         -   8 bone values, 12 bone weights
         -
         -   2 bone value, 4 weights
         -  pos   += bone1.xyz * bone_value.x;
         -  pos.z += bone1.w   * bone_value.y;
         -
         -   should I just compute sin/cos in the shader?!?
         -   y2 = y*(bone_weight[0]||bone_weight[1] ? bone_data[0] : 1) + z*(bone_weight[0] ?  bone_data[1] : 0)
         -   z2 = z*(bone_weight[0] ? bone_data[0] : 1) + y*(bone_weight[0] ? -bone_data[1] : 0);
         -   x2 = x*(bone_weight[1] ? bone_data[0] : 1) + y*(bone_weight[1] ? -bone_data[1] : 0);
         -
         -   4 bone values, and 6 weights
         -  pos.xy+= bone1.xy  * bone_value.x;
         -  pos.z += bone1.z   * bone_value.y;
         -  pos.xy+= bone2.xy  * bone_value.z;
         -  pos.z += bone2.z   * bone_value.w;


   -  player inventory
      *  action bar
      *  MC-creative-mode select
      +  more placeholder
      +  real inventory
   +  belt placement UI
      +  ghost shapes
      -  place-and-drag
      -  automatic rotation
   *  machine placement UI (ghost shapes)
   -  clean-up hacky code
      - ore
      - block edits
   -  serialize factory, not just edits
   +  player block placement
      * raycast
         * physics representation
      * rebuild chunks
         * make sure we rebuild if we change a block while we're already rebuilding
   *  load textures from JPG
   *  conveyor belts
      * animation by scrolling textures
      * how to do 90-degree turns
         - use bottom bits instead of top bits for animation
      * how to make animated blocks
   *  save changes to memory?
   +  try making conveyor belts half-height
   *  conveyor belts - factorio & factoryidle
   -  moving objects need to be treated as 'objects'
      - can be sprites or polygonal
      * large quantities (10,000?) of sprites
      * medium quantities of polygonal objects
   +  save changes to disk
   *  conveyor belts (special physics)
      * factorio-style two-rows-of-sprite-sized stuff per conveyor
      x or just one row of block-sized stuff
      x maybe require multi-block things to be supported by multiple conveyors
      * factorio-style stuff stops at end of conveyor, not infinifactory falling-off-esque
   *  basic pickers (factorio "inserters")
   -  speed up texture loading (threads at startup)
   -  fixed "objects" can be blocks
      - any machinery that you can have a lot of should be (geometrically) blocks
      * machinery that is rare can go through a simpler polygon engine (same as 'moving object' system?)
         - actually have a better instanced system w/animation
   x  can build multi-block machines by infinifactory-style welding??
   +  mine ore from ore blocks
      - gradual process that slowly depletes ore
        - graphical representation how?!?
          - encode as second texture on block so can have many degraded blocks?
            - if state changes frequently have to rebuild chunk frequently
   +  player inventory
   -  player crafting(?)
   -  tool-equipping system(?)

   -  rendering
      * 1M blocks
      * 10,000 sprites
      * 1000 picker-like things with animation
      - ?1,000 block-like things with animation
      - ?1,000 block surface decals
      - 500 polygonal objects

   Factorio-esque cleanup:
      - forbid you from placing belts under ramps (cause bug with ramp outputing to start of lower belt run instead of middle)

   Game features:
   -  object system
   -  object (non-terrain) rendering
      - what model-file format?
      - animation? skinning?
      - procedural animation of characters?
   -  fix walking physics
      + push smoothly along walls
      * smooth camera height when stepping up
      * don't stick to walls when falling one block
      - core physics model should steer existing momentum to new direction instead of being so Newtonian
   *  physics representation (1 bit per block? run-length? 1-byte min, 1-byte max, bits within that range?)
      - 1 byte length
      - 1 byte type
   -  raycast (needs physics rep)
   -  shoot guns

   Networking:
   -  client-side prediction
      -  client replays last K inputs relative to server update data
   -  test network lag, dropouts
   -  server sends sparser updates
   -  server tracks multiple physics regions, one per player
   -  client interpolates between recent server updates
      - and extrapolates if necessary?!?
   -  replace SDL_Net with a lighter-weight #define socket wrapper
      - http://gafferongames.com/networking-for-game-programmers/sending-and-receiving-packets/
   *  client transmits last N inputs
   *  server buffers M inputs from client

   Look prettier:
   -  add skylight
   -  shadowing (try caching terrain-only shadowmaps so don't have to redraw all terrain every frame)
   -  more work on terrain -- zmc pseudo-wang tile approach
   -  fix depth fighting when far from origin
   -  dynamically set view distance
   -  improved height-field terrain
   -  other terrain features
   -  texture improvements
     -  tweak pixar textures to be more grey so can dynamically recolor
     -  find better open textures or pay someone to make them
   -  add better lighting
   -  use more block types

   Performance:
   -  limit mesh cache to max size
   -  optimize mesh building
   -  optimize terrain generation

   Voxel features:
   -  disk save/load
      - lz4 compression?
   -  user block create/destroy (needs raycast?)
   -  networking

   Code quality
   -  vector lib
   -  check for memory leaks
   -  check what happens if same mesh_chunk_status is allocated, abandoned, and reallocated
   -  organize obbg_funcs.h by source file

Not right now:

   -  check "voxel_world_vheight_spiky.avi" for terrain inspiration
   -  port to sdl3
